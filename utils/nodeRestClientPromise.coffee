Promise = require('bluebird')
methodNamesToPromisify = 'get post put delete patch'.split(' ')
nodeRestClient = require('node-rest-client')

###*
# The Promisifier promisifying the node-rest-client
# @param originalMethod Original method to be promisified
# @returns {promisified} The promisified version of the method
# @constructor
###

EventEmitterPromisifier = (originalMethod) ->
  ->
    args = [].slice.call(arguments)
    self = this
    new Promise((resolve, reject) ->
# add the callback to the arguments
      args.push (data, response) ->
# resolve the Promise providing data and response as
# an object
        resolve
          data: data
          response: response
        return
      # call the method
      emitter = originalMethod.apply(self, args)
      # listen to specific events leading to rejects
      emitter.on('error', (err) ->
        reject err
        return
      ).on('requestTimeout', ->
        reject new (Promise.TimeoutError)
        return
      ).on 'responseTimeout', ->
        reject new (Promise.TimeoutError)
        return
      return
    )

###*
# A simple wrapper around `new Client(options)`, returning a promisified
# client object.
#
# @param options Options for `node-rest-client.Client`
# @returns {*} the promisified client
###

client = (options) ->
  restClient = new (nodeRestClient.Client)(options)
  promisifiedClient = Promise.promisifyAll(restClient,
    filter: (name) ->
      methodNamesToPromisify.indexOf(name) > -1
    promisifier: EventEmitterPromisifier
    suffix: 'Promise')
  promisifiedClient

exports.Client = client

# ---
# generated by js2coffee 2.2.0